// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Enum_TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Enum_ReportStatus {
  OPEN
  RESOLVED
  CLOSED
}

enum Enum_RoleName {
  ADMIN
  USER
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  role          Enum_RoleName @default(USER)
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]     @relation(name: "AccountToUser")
  sessions      Session[]     @relation(name: "SessionToUser")
  deleted       Boolean       @default(false)
  enabled       Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tasks         Task[]        // Relaci贸n con tareas asignadas
  reports       Report[]      @relation("ReportToUser")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]   // Relaci贸n con las tareas
  reports     Report[] @relation("ProjectReports") // Relaci贸n con Report
}


model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      Enum_TaskStatus @default(PENDING)
  dueDate     DateTime?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  assignedTo  User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reports     Report[] @relation("TaskReports")  // Relaci贸n con Report
}


model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdBy   User     @relation(fields: [createdById], references: [id], name: "ReportToUser")
  createdById String
  relatedTask Task?    @relation("TaskReports", fields: [taskId], references: [id])
  taskId      String?
  relatedProject Project? @relation("ProjectReports", fields: [projectId], references: [id])
  projectId   String?
  status      Enum_ReportStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
